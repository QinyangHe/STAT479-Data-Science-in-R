pivot_wider(names_from = day_of_year, values_from = temp)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
install.packages("map_data")
install.packages("maps")
library(tidyverse)
library(nycflights13)
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
flights
planes
airlines
airports
weather
# put your answer here.
?avg
flights
planes
airlines
airports
weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay))
delay
flights
planes
airlines
airports
weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
delay
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = left_join(airports, delay, by = c("faa", "dest"))
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = left_join(airports, delay)
airports$faa
delay$dest
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = left_join(airports, delay, by = c("faa", "dest"))
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa", "dest"))
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = left_join(airports, delay, by = c("faa" =  "dest"))
combined
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = left_join(airports, delay, by = c("faa" =  "dest"))
combined
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
?geom_point
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = avg_delay) +
coord_quickmap()
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay) +
coord_quickmap()
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay / 100) +
coord_quickmap()
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay / 50) +
coord_quickmap()
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay / 10) +
coord_quickmap()
# put your answer here.
flights
# put your answer here.
flights = flights %>%
mutate(air_time_hours = air_time / 60)
# put your answer here.
flights = flights %>%
mutate(air_time_hours = air_time / 60)
flights
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay / 5) +
coord_quickmap()
# flights
# planes
# airlines
# airports
# weather
# put your answer here.
delay = flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = T))
combined = inner_join(airports, delay, by = c("faa" =  "dest"))
combined
combined %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point(size = combined$avg_delay / 15) +
coord_quickmap()
# put your answer here.
flights
airplanes
# put your answer here.
flights
planes
library(tidyverse)
library(nycflights13)
airports %>%
semi_join(flights, c("faa" = "dest")) %>%
ggplot(aes(lon, lat)) +
borders("state") +
geom_point() +
coord_quickmap()
# put your answer here.
flights
planes
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_flights
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(avg_speed_planes)
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$`mean(avg_speed)`)
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$`mean(avg_speed)`, ylab = "speed (miles/hour", main = "Histogram for average speed for each plane")
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$`mean(avg_speed)`, xlab = "speed (miles/hour", main = "Histogram for average speed for each plane")
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(carrier) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$`mean(avg_speed)`, xlab = "speed (miles/hour)", main = "Histogram for average speed for each plane")
planes
planes
flights
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(tailnum) %>%
summarise(mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$`mean(avg_speed)`, xlab = "speed (miles/hour)", main = "Histogram for average speed for each plane")
# put your answer here.
avg_speed_flights = flights %>%
mutate(avg_speed = distance / hour)
avg_speed_planes = avg_speed_flights %>%
group_by(tailnum) %>%
summarise(mean_speed = mean(avg_speed))
avg_speed_planes
hist(x = avg_speed_planes$mean_speed, xlab = "speed (miles/hour)", main = "Histogram for average speed for each plane")
# put answer here
planes = inner_join(planes, avg_speed_planes)
ggplot(aes=())
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
ggplot(aes=())
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
ggplot(aes=(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
ggplot(aes(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
planes %>%
ggplot(aes(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
planes %>%
ggplot(aes(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
planes %>%
ggplot(aes(x = planes$engine, y = planes$type)) + geom_boxplot()
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
planes %>%
ggplot(aes(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
planes %>%
ggplot(aes(x = planes$type, y = planes$mean_speed)) + geom_boxplot()
?flights
# put your answer here.
flights
# put your answer here.
flights %>%
group_by(tailnum) %>%
summarise(count(carrier))
# put your answer here.
flights %>%
group_by(tailnum) %>%
summarise(n_distinct(carrier))
# put your answer here.
carrier_plane = flights %>%
group_by(tailnum) %>%
summarise(n_distinct(carrier))
# put your answer here.
carrier_plane = flights %>%
group_by(tailnum) %>%
summarise(n_distinct(carrier))
max(carrier_plane)
# put your answer here.
carrier_plane = flights %>%
group_by(tailnum) %>%
summarise(n_owner = n_distinct(carrier))
max(carrier_plane$n_owner)
# put answer here
planes = inner_join(planes, avg_speed_planes)
planes
planes %>%
ggplot(aes(x = planes$engine, y = planes$mean_speed)) + geom_boxplot()
planes %>%
ggplot(aes(x = planes$type, y = planes$mean_speed)) + geom_boxplot()
setwd("E:/GITHUB/STAT479-Data-Science-in-R/CensusApp")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
percent_map( # some arguments )
})
}
# Run app ----
shinyApp(ui, server)
library(shiny)
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
percent_map( # some arguments )
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$map <- renderPlot({
percent_map( # some arguments )
})
}
percent_map()
source("helpers.R")
counties <- readRDS("data/counties.rds")
library(maps)
library(mapproj)
library(shiny)
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(plotOutput("map"))
)
)
# Server logic ----
server <- function(input, output) {
output$map <- renderPlot({
percent_map()
})
}
# Run app ----
shinyApp(ui, server)
runApp()
